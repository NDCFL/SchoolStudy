<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE struts PUBLIC
    "-//Apache Software Foundation//DTD Struts Configuration 2.0//EN"
    "http://struts.apache.org/dtds/struts-2.0.dtd">
<struts>
	<!-- 允许动态调用action中的函数通过!加上函数的名称来访问 -->
    <constant name="struts.enable.DynamicMethodInvocation" value="true" />
   	<!-- 指定WEB应用的编码集，相当于调用HttpServletRequest.setCharacterEncodint方法 -->
	<constant name="struts.i18n.encoding" value="UTF-8" />
	<!-- 修改配置文件后及时更新到服务器上 -->
	<constant name="struts.configuration.xml.reload" value="true" />
	<!--  开发提示：出错时打印更详细的信息-->
	<constant name="struts.devMode" value="false" />
	<!-- 设置struts默认主题 
   	<constant name="struts.ui.theme" value="simple" ></constant>-->
   	<!-- 使用国际化 -->
   	<constant name="struts.custom.i18n.resources" value="globalMessages"/>
   	<!-- 指定的默认上传文件的临时路径 -->
   	<constant name="struts.multipart.saveDir" value="/tmp"/>
 	<!-- example -->
    <include file="conf\action\example.xml"/>
	<include file="conf\action\example-ajax.xml"/>
    <!-- 
    	配置action类
    		1、name配置的是介绍p页面action的路径
    		2、class配置的是该action所在的包的路径
    	result配置的是跳转的页面的路径
    		1、name配置的是在actin中返回的页面的常亮值
    		2、/加上要访问的页面
    		3、默认的type为forword,可以先访问action在回来配置type=redirectAction
     --> 
	<package name="Action" extends="struts-default" namespace="/" >
		<!--配置拦截器栈  -->
		 <interceptors>
			<interceptor name="Quanxian" class="Interceptor.Quanxian"></interceptor>
			<interceptor name="Luntan" class="Interceptor.Luntan"></interceptor>
			<interceptor name="Function" class="Interceptor.Function"></interceptor>
			<interceptor-stack name="interceptor">
				<interceptor-ref name="defaultStack"></interceptor-ref>
				<interceptor-ref name="timer"></interceptor-ref>
			</interceptor-stack>
		</interceptors>
		<default-interceptor-ref name="interceptor"></default-interceptor-ref>
		<!-- 配置系统全局result -->
		<global-results>
			<result name="error">/error.jsp</result>
		</global-results>
		<!--全局的异常处理 -->
		<global-exception-mappings>
			<exception-mapping result="error" exception="java.lang.NullPointerException"></exception-mapping>
		</global-exception-mappings>
		<action name="LoginAction" class="Action.LoginAction" >
			<result name="login" type="redirectAction">/StudentAction</result>
			<result name="input" >/index.jsp</result>
		</action>
		<action name="StudentAction" class="Action.StudentAction">
			<result name="login">/T2/student.jsp</result>
		</action>
		<!-- 使用map集合和实现三个接口获取servlet对象RequestAware,SessionAware,ApplicationAware -->
		<action name="RequestAPI" class="Action.RequestAPI">
			<result name="login">/T2/Awareservletioc.jsp</result>
		</action>
		<!-- 使用ServletContext和实现两个接口获取servlet对象ServletContextAware,ServletRequestAware -->
		<action name="ServletContextActionAPI" class="Action.ServletContextActionAPI">
			<result name="login">/T2/Awareservletioc.jsp</result>
		</action>
		<!-- 使用纯map集合来获取servlet对象-->
		<action name="MapServlet" class="Action.MapServlet">
			<result name="login">/T2/Awareservletioc.jsp</result>
		</action>
		<!-- 使用servlet直接获取servlet对象-->
		<action name="ServletAction" class="Action.ServletAction">
			<result name="login">/T2/Awareservletioc.jsp</result>
		</action>  
		<action name="Login" class="Action.Login">
			<result name="input">/T3/checklogin.jsp</result>
		</action>
		<action name="TokenAction" class="Action.TokenAction">
			<!-- 配置的是拦截器,用于处理重复提交数据
				<interceptor-ref name="defaultStack"/>
				<interceptor-ref name="token"/>
				配置错误页面的处理
				<result name="invalid.token">/T4/token.jsp</result>
			 -->
			<result name="input">/T4/token.jsp</result>
			<result name="success">/T4/error.jsp</result>
		</action>
		<action name="FirstRenameAction" class="Action.FirstRenameAction">
			<result type="chain" name="success">SecondRenameAction</result>
		</action>
		<action name="SecondRenameAction" class="Action.SecondRenameAction">
			<result name="success">/Stack/rename.jsp</result>
			<param name="aliases">#{'srcname':'rename'}</param>
		</action>
		<action name="Quanxian" class="Action.Quanxian">
			<result name="success">/interceptor/succ.jsp</result>
			<result name="error">/interceptor/fail.jsp</result>
			<interceptor-ref name="defaultStack"></interceptor-ref>
			<interceptor-ref name="Quanxian"></interceptor-ref>
		</action>
		<action name="LuntanAction" class="Action.LuntanAction">
			<result name="success">/interceptor/luntan.jsp</result>
			<interceptor-ref name="defaultStack"></interceptor-ref>
			<interceptor-ref name="Luntan"></interceptor-ref>
		</action>
		<action name="MyException" class="Action.MyException">
			<result name="login">/T2/Awareservletioc.jsp</result>
		</action>
		<action name="FunctionAction" class="Action.FunctionAction">
			<result name="success">/T1/login.jsp</result>
			<result name="input">/interceptor/fail.jsp</result>
			<interceptor-ref name="defaultStack"></interceptor-ref>
			<interceptor-ref name="Function">
				<!-- 不拦截的方法 -->
				<param name="includeMethods">init1,init,init2</param>
				<!-- 拦截的方法 -->
				<param name="excludeMethods">init3,init4</param>
			</interceptor-ref>
		</action>
		<action name="FileUpAction" class="Action.FileUpAction">
			<result name="success">/fileup/upfilesuccess.jsp</result>
			<result name="input">/fileup/upfile.jsp</result>
			<interceptor-ref name="fileUpload">
				<!-- 允许上传的文件类型  -->
				<param name="allowedTypes">image/bmp,image/png,image/gif,image/jpeg</param>
				<!--上传文件的最大容量 单位字节  -->
				<param name="maximumSize">20000000</param>
			</interceptor-ref>
			<interceptor-ref name="defaultStack"></interceptor-ref>
		</action>
		<action name="FileDownAction" class="Action.FileDownAction">
			<interceptor-ref name="defaultStack"></interceptor-ref>
			<result name="success" type="stream">
				<!-- 定义相关参数 -->
				<param name="contentType">${contenttype}</param>
				<param name="inputName">InputStream</param>
				<param name="bufferSize">4096</param>
				<param name="contentDisposition">attachment;filename=${filename}</param>
			</result>
		</action>
	</package>
</struts>